buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

plugins {
    id 'com.android.library'
    id 'pl.allegro.tech.build.axion-release' version '1.15.0'
    id "com.github.dcendents.android-maven" version "2.1"
    id 'jacoco'
}

apply plugin: 'kotlin-android'

version = scmVersion.version
group = 'com.github.unhappychoice.colorhash'

scmVersion {
    tag {
        prefix = ''
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation "com.winterbe:expekt:0.5.0"
    testImplementation "io.polymorphicpanda.kspec:kspec-core:0.4.0"
    testImplementation "io.polymorphicpanda.kspec:kspec-junit-runner:0.4.0"
    testImplementation "org.robolectric:robolectric:4.9.2"
}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacoco(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
        classDirectories.setFrom(
                files(
                        fileTree(
                                dir: './build/intermediates/javac/debug/compileDebugJavaWithJavac/classes',
                                excludes: ['**/R.class', '**/R$*.class', '**/BuildConfig.class', '**/Manifest*.*', '**/*$inlined$*.*']
                        ) + fileTree(
                                dir: './build/tmp/kotlin-classes/debug',
                                excludes: ['**/R.class', '**/R$*.class', '**/BuildConfig.class', '**/Manifest*.*', '**/*$inlined$*.*']
                        )
                )
        )
    }
    sourceDirectories.from files('src/main/kotlin')
    executionData.from files('build/jacoco/testDebugUnitTest.exec')
}
